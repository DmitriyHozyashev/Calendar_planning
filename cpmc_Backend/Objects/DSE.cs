//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cpmc
{
    using System;
    using System.Xml;
    using ICSSoft.STORMNET;
    using ICSSoft.STORMNET.Business.Audit;
    using ICSSoft.STORMNET.Business.Audit.Objects;
    
    
    // *** Start programmer edit section *** (Using statements)

    // *** End programmer edit section *** (Using statements)


    /// <summary>
    /// ДСЕ.
    /// </summary>
    // *** Start programmer edit section *** (DSE CustomAttributes)

    // *** End programmer edit section *** (DSE CustomAttributes)
    [AutoAltered()]
    [Caption("ДСЕ")]
    [AccessType(ICSSoft.STORMNET.AccessType.none)]
    [View("AuditView", new string[] {
            "Code as \'Code\'",
            "Name as \'Name\'",
            "LaborIntensity as \'Labor intensity\'",
            "LaborIntensityUnit as \'Labor intensity unit\'",
            "LaborIntensityUnit.Name as \'Name\'",
            "ProcessOrder as \'Process order\'",
            "ProcessOrder.Name as \'Name\'",
            "WorkType as \'Work type\'",
            "WorkType.Name as \'Name\'",
            "UnitMetr as \'Unit metr\'",
            "UnitMetr.Name as \'Name\'"})]
    [AssociatedDetailViewAttribute("AuditView", "DSERout", "AuditView", true, "", "D s e rout", true, new string[] {
            ""})]
    [View("DSEE", new string[] {
            "Code as \'Код\'",
            "Name as \'Наименование\'",
            "WorkType as \'Тип\'",
            "WorkType.Name as \'Name\'",
            "UnitMetr as \'Единицы измерения\'",
            "UnitMetr.ShortName",
            "LaborIntensity as \'Трудоемкость\'",
            "LaborIntensityUnit as \'Единицы измерения\'",
            "LaborIntensityUnit.ShortName",
            "ProcessOrder as \'Порядок обработки\'",
            "ProcessOrder.Name"}, Hidden=new string[] {
            "WorkType.Name",
            "LaborIntensityUnit.ShortName",
            "ProcessOrder.Name"})]
    [AssociatedDetailViewAttribute("DSEE", "DSERout", "DSERoutE", true, "", "Маршрут", true, new string[] {
            ""})]
    [MasterViewDefineAttribute("DSEE", "WorkType", ICSSoft.STORMNET.LookupTypeEnum.Standard, "", "Name")]
    [MasterViewDefineAttribute("DSEE", "UnitMetr", ICSSoft.STORMNET.LookupTypeEnum.Standard, "", "ShortName")]
    [MasterViewDefineAttribute("DSEE", "LaborIntensityUnit", ICSSoft.STORMNET.LookupTypeEnum.Standard, "", "ShortName")]
    [MasterViewDefineAttribute("DSEE", "ProcessOrder", ICSSoft.STORMNET.LookupTypeEnum.Standard, "", "Name")]
    [View("DSEL", new string[] {
            "Code as \'Код\'",
            "Name as \'Наименование\'",
            "UnitMetr.ShortName as \'Единицы измерения\'",
            "LaborIntensity as \'Трудоемкость\'",
            "LaborIntensityUnit.ShortName as \'Единицы измерения\'",
            "WorkType.Name as \'Name\'",
            "CreateTime as \'Дата создания\'",
            "Creator as \'Создатель\'",
            "EditTime as \'Дата редактирвоани\'",
            "Editor as \'Редактор\'"})]
    public class DSE : ICSSoft.STORMNET.DataObject, IDataObjectWithAuditFields
    {
        
        private int fCode;
        
        private string fName;
        
        private double fLaborIntensity;
        
        private System.Nullable<System.DateTime> fCreateTime;
        
        private string fCreator;
        
        private System.Nullable<System.DateTime> fEditTime;
        
        private string fEditor;
        
        private Cpmc.UnitMetr fLaborIntensityUnit;
        
        private Cpmc.ProcessOrder fProcessOrder;
        
        private Cpmc.WorkType fWorkType;
        
        private Cpmc.UnitMetr fUnitMetr;
        
        private Cpmc.DetailArrayOfDSERout fDSERout;
        
        // *** Start programmer edit section *** (DSE CustomMembers)

        // *** End programmer edit section *** (DSE CustomMembers)

        
        /// <summary>
        /// Code.
        /// </summary>
        // *** Start programmer edit section *** (DSE.Code CustomAttributes)

        // *** End programmer edit section *** (DSE.Code CustomAttributes)
        public virtual int Code
        {
            get
            {
                // *** Start programmer edit section *** (DSE.Code Get start)

                // *** End programmer edit section *** (DSE.Code Get start)
                int result = this.fCode;
                // *** Start programmer edit section *** (DSE.Code Get end)

                // *** End programmer edit section *** (DSE.Code Get end)
                return result;
            }
            set
            {
                // *** Start programmer edit section *** (DSE.Code Set start)

                // *** End programmer edit section *** (DSE.Code Set start)
                this.fCode = value;
                // *** Start programmer edit section *** (DSE.Code Set end)

                // *** End programmer edit section *** (DSE.Code Set end)
            }
        }
        
        /// <summary>
        /// Name.
        /// </summary>
        // *** Start programmer edit section *** (DSE.Name CustomAttributes)

        // *** End programmer edit section *** (DSE.Name CustomAttributes)
        [StrLen(255)]
        public virtual string Name
        {
            get
            {
                // *** Start programmer edit section *** (DSE.Name Get start)

                // *** End programmer edit section *** (DSE.Name Get start)
                string result = this.fName;
                // *** Start programmer edit section *** (DSE.Name Get end)

                // *** End programmer edit section *** (DSE.Name Get end)
                return result;
            }
            set
            {
                // *** Start programmer edit section *** (DSE.Name Set start)

                // *** End programmer edit section *** (DSE.Name Set start)
                this.fName = value;
                // *** Start programmer edit section *** (DSE.Name Set end)

                // *** End programmer edit section *** (DSE.Name Set end)
            }
        }
        
        /// <summary>
        /// LaborIntensity.
        /// </summary>
        // *** Start programmer edit section *** (DSE.LaborIntensity CustomAttributes)

        // *** End programmer edit section *** (DSE.LaborIntensity CustomAttributes)
        public virtual double LaborIntensity
        {
            get
            {
                // *** Start programmer edit section *** (DSE.LaborIntensity Get start)

                // *** End programmer edit section *** (DSE.LaborIntensity Get start)
                double result = this.fLaborIntensity;
                // *** Start programmer edit section *** (DSE.LaborIntensity Get end)

                // *** End programmer edit section *** (DSE.LaborIntensity Get end)
                return result;
            }
            set
            {
                // *** Start programmer edit section *** (DSE.LaborIntensity Set start)

                // *** End programmer edit section *** (DSE.LaborIntensity Set start)
                this.fLaborIntensity = value;
                // *** Start programmer edit section *** (DSE.LaborIntensity Set end)

                // *** End programmer edit section *** (DSE.LaborIntensity Set end)
            }
        }
        
        /// <summary>
        /// Время создания объекта.
        /// </summary>
        // *** Start programmer edit section *** (DSE.CreateTime CustomAttributes)

        // *** End programmer edit section *** (DSE.CreateTime CustomAttributes)
        public virtual System.Nullable<System.DateTime> CreateTime
        {
            get
            {
                // *** Start programmer edit section *** (DSE.CreateTime Get start)

                // *** End programmer edit section *** (DSE.CreateTime Get start)
                System.Nullable<System.DateTime> result = this.fCreateTime;
                // *** Start programmer edit section *** (DSE.CreateTime Get end)

                // *** End programmer edit section *** (DSE.CreateTime Get end)
                return result;
            }
            set
            {
                // *** Start programmer edit section *** (DSE.CreateTime Set start)

                // *** End programmer edit section *** (DSE.CreateTime Set start)
                this.fCreateTime = value;
                // *** Start programmer edit section *** (DSE.CreateTime Set end)

                // *** End programmer edit section *** (DSE.CreateTime Set end)
            }
        }
        
        /// <summary>
        /// Создатель объекта.
        /// </summary>
        // *** Start programmer edit section *** (DSE.Creator CustomAttributes)

        // *** End programmer edit section *** (DSE.Creator CustomAttributes)
        [StrLen(255)]
        public virtual string Creator
        {
            get
            {
                // *** Start programmer edit section *** (DSE.Creator Get start)

                // *** End programmer edit section *** (DSE.Creator Get start)
                string result = this.fCreator;
                // *** Start programmer edit section *** (DSE.Creator Get end)

                // *** End programmer edit section *** (DSE.Creator Get end)
                return result;
            }
            set
            {
                // *** Start programmer edit section *** (DSE.Creator Set start)

                // *** End programmer edit section *** (DSE.Creator Set start)
                this.fCreator = value;
                // *** Start programmer edit section *** (DSE.Creator Set end)

                // *** End programmer edit section *** (DSE.Creator Set end)
            }
        }
        
        /// <summary>
        /// Время последнего редактирования объекта.
        /// </summary>
        // *** Start programmer edit section *** (DSE.EditTime CustomAttributes)

        // *** End programmer edit section *** (DSE.EditTime CustomAttributes)
        public virtual System.Nullable<System.DateTime> EditTime
        {
            get
            {
                // *** Start programmer edit section *** (DSE.EditTime Get start)

                // *** End programmer edit section *** (DSE.EditTime Get start)
                System.Nullable<System.DateTime> result = this.fEditTime;
                // *** Start programmer edit section *** (DSE.EditTime Get end)

                // *** End programmer edit section *** (DSE.EditTime Get end)
                return result;
            }
            set
            {
                // *** Start programmer edit section *** (DSE.EditTime Set start)

                // *** End programmer edit section *** (DSE.EditTime Set start)
                this.fEditTime = value;
                // *** Start programmer edit section *** (DSE.EditTime Set end)

                // *** End programmer edit section *** (DSE.EditTime Set end)
            }
        }
        
        /// <summary>
        /// Последний редактор объекта.
        /// </summary>
        // *** Start programmer edit section *** (DSE.Editor CustomAttributes)

        // *** End programmer edit section *** (DSE.Editor CustomAttributes)
        [StrLen(255)]
        public virtual string Editor
        {
            get
            {
                // *** Start programmer edit section *** (DSE.Editor Get start)

                // *** End programmer edit section *** (DSE.Editor Get start)
                string result = this.fEditor;
                // *** Start programmer edit section *** (DSE.Editor Get end)

                // *** End programmer edit section *** (DSE.Editor Get end)
                return result;
            }
            set
            {
                // *** Start programmer edit section *** (DSE.Editor Set start)

                // *** End programmer edit section *** (DSE.Editor Set start)
                this.fEditor = value;
                // *** Start programmer edit section *** (DSE.Editor Set end)

                // *** End programmer edit section *** (DSE.Editor Set end)
            }
        }
        
        /// <summary>
        /// ДСЕ.
        /// </summary>
        // *** Start programmer edit section *** (DSE.LaborIntensityUnit CustomAttributes)

        // *** End programmer edit section *** (DSE.LaborIntensityUnit CustomAttributes)
        [NotNull()]
        public virtual Cpmc.UnitMetr LaborIntensityUnit
        {
            get
            {
                // *** Start programmer edit section *** (DSE.LaborIntensityUnit Get start)

                // *** End programmer edit section *** (DSE.LaborIntensityUnit Get start)
                Cpmc.UnitMetr result = this.fLaborIntensityUnit;
                // *** Start programmer edit section *** (DSE.LaborIntensityUnit Get end)

                // *** End programmer edit section *** (DSE.LaborIntensityUnit Get end)
                return result;
            }
            set
            {
                // *** Start programmer edit section *** (DSE.LaborIntensityUnit Set start)

                // *** End programmer edit section *** (DSE.LaborIntensityUnit Set start)
                this.fLaborIntensityUnit = value;
                // *** Start programmer edit section *** (DSE.LaborIntensityUnit Set end)

                // *** End programmer edit section *** (DSE.LaborIntensityUnit Set end)
            }
        }
        
        /// <summary>
        /// ДСЕ.
        /// </summary>
        // *** Start programmer edit section *** (DSE.ProcessOrder CustomAttributes)

        // *** End programmer edit section *** (DSE.ProcessOrder CustomAttributes)
        [PropertyStorage(new string[] {
                "ProcessOrder"})]
        [NotNull()]
        public virtual Cpmc.ProcessOrder ProcessOrder
        {
            get
            {
                // *** Start programmer edit section *** (DSE.ProcessOrder Get start)

                // *** End programmer edit section *** (DSE.ProcessOrder Get start)
                Cpmc.ProcessOrder result = this.fProcessOrder;
                // *** Start programmer edit section *** (DSE.ProcessOrder Get end)

                // *** End programmer edit section *** (DSE.ProcessOrder Get end)
                return result;
            }
            set
            {
                // *** Start programmer edit section *** (DSE.ProcessOrder Set start)

                // *** End programmer edit section *** (DSE.ProcessOrder Set start)
                this.fProcessOrder = value;
                // *** Start programmer edit section *** (DSE.ProcessOrder Set end)

                // *** End programmer edit section *** (DSE.ProcessOrder Set end)
            }
        }
        
        /// <summary>
        /// ДСЕ.
        /// </summary>
        // *** Start programmer edit section *** (DSE.WorkType CustomAttributes)

        // *** End programmer edit section *** (DSE.WorkType CustomAttributes)
        [NotNull()]
        public virtual Cpmc.WorkType WorkType
        {
            get
            {
                // *** Start programmer edit section *** (DSE.WorkType Get start)

                // *** End programmer edit section *** (DSE.WorkType Get start)
                Cpmc.WorkType result = this.fWorkType;
                // *** Start programmer edit section *** (DSE.WorkType Get end)

                // *** End programmer edit section *** (DSE.WorkType Get end)
                return result;
            }
            set
            {
                // *** Start programmer edit section *** (DSE.WorkType Set start)

                // *** End programmer edit section *** (DSE.WorkType Set start)
                this.fWorkType = value;
                // *** Start programmer edit section *** (DSE.WorkType Set end)

                // *** End programmer edit section *** (DSE.WorkType Set end)
            }
        }
        
        /// <summary>
        /// ДСЕ.
        /// </summary>
        // *** Start programmer edit section *** (DSE.UnitMetr CustomAttributes)

        // *** End programmer edit section *** (DSE.UnitMetr CustomAttributes)
        [NotNull()]
        public virtual Cpmc.UnitMetr UnitMetr
        {
            get
            {
                // *** Start programmer edit section *** (DSE.UnitMetr Get start)

                // *** End programmer edit section *** (DSE.UnitMetr Get start)
                Cpmc.UnitMetr result = this.fUnitMetr;
                // *** Start programmer edit section *** (DSE.UnitMetr Get end)

                // *** End programmer edit section *** (DSE.UnitMetr Get end)
                return result;
            }
            set
            {
                // *** Start programmer edit section *** (DSE.UnitMetr Set start)

                // *** End programmer edit section *** (DSE.UnitMetr Set start)
                this.fUnitMetr = value;
                // *** Start programmer edit section *** (DSE.UnitMetr Set end)

                // *** End programmer edit section *** (DSE.UnitMetr Set end)
            }
        }
        
        /// <summary>
        /// ДСЕ.
        /// </summary>
        // *** Start programmer edit section *** (DSE.DSERout CustomAttributes)

        // *** End programmer edit section *** (DSE.DSERout CustomAttributes)
        public virtual Cpmc.DetailArrayOfDSERout DSERout
        {
            get
            {
                // *** Start programmer edit section *** (DSE.DSERout Get start)

                // *** End programmer edit section *** (DSE.DSERout Get start)
                if ((this.fDSERout == null))
                {
                    this.fDSERout = new Cpmc.DetailArrayOfDSERout(this);
                }
                Cpmc.DetailArrayOfDSERout result = this.fDSERout;
                // *** Start programmer edit section *** (DSE.DSERout Get end)

                // *** End programmer edit section *** (DSE.DSERout Get end)
                return result;
            }
            set
            {
                // *** Start programmer edit section *** (DSE.DSERout Set start)

                // *** End programmer edit section *** (DSE.DSERout Set start)
                this.fDSERout = value;
                // *** Start programmer edit section *** (DSE.DSERout Set end)

                // *** End programmer edit section *** (DSE.DSERout Set end)
            }
        }
        
        /// <summary>
        /// Class views container.
        /// </summary>
        public class Views
        {
            
            /// <summary>
            /// "AuditView" view.
            /// </summary>
            public static ICSSoft.STORMNET.View AuditView
            {
                get
                {
                    return ICSSoft.STORMNET.Information.GetView("AuditView", typeof(Cpmc.DSE));
                }
            }
            
            /// <summary>
            /// "DSEE" view.
            /// </summary>
            public static ICSSoft.STORMNET.View DSEE
            {
                get
                {
                    return ICSSoft.STORMNET.Information.GetView("DSEE", typeof(Cpmc.DSE));
                }
            }
            
            /// <summary>
            /// "DSEL" view.
            /// </summary>
            public static ICSSoft.STORMNET.View DSEL
            {
                get
                {
                    return ICSSoft.STORMNET.Information.GetView("DSEL", typeof(Cpmc.DSE));
                }
            }
        }
        
        /// <summary>
        /// Audit class settings.
        /// </summary>
        public class AuditSettings
        {
            
            /// <summary>
            /// Включён ли аудит для класса.
            /// </summary>
            public static bool AuditEnabled = true;
            
            /// <summary>
            /// Использовать имя представления для аудита по умолчанию.
            /// </summary>
            public static bool UseDefaultView = true;
            
            /// <summary>
            /// Включён ли аудит операции чтения.
            /// </summary>
            public static bool SelectAudit = false;
            
            /// <summary>
            /// Имя представления для аудирования операции чтения.
            /// </summary>
            public static string SelectAuditViewName = "AuditView";
            
            /// <summary>
            /// Включён ли аудит операции создания.
            /// </summary>
            public static bool InsertAudit = true;
            
            /// <summary>
            /// Имя представления для аудирования операции создания.
            /// </summary>
            public static string InsertAuditViewName = "AuditView";
            
            /// <summary>
            /// Включён ли аудит операции изменения.
            /// </summary>
            public static bool UpdateAudit = true;
            
            /// <summary>
            /// Имя представления для аудирования операции изменения.
            /// </summary>
            public static string UpdateAuditViewName = "AuditView";
            
            /// <summary>
            /// Включён ли аудит операции удаления.
            /// </summary>
            public static bool DeleteAudit = true;
            
            /// <summary>
            /// Имя представления для аудирования операции удаления.
            /// </summary>
            public static string DeleteAuditViewName = "AuditView";
            
            /// <summary>
            /// Путь к форме просмотра результатов аудита.
            /// </summary>
            public static string FormUrl = "";
            
            /// <summary>
            /// Режим записи данных аудита (синхронный или асинхронный).
            /// </summary>
            public static ICSSoft.STORMNET.Business.Audit.Objects.tWriteMode WriteMode = ICSSoft.STORMNET.Business.Audit.Objects.tWriteMode.Synchronous;
            
            /// <summary>
            /// Максимальная длина сохраняемого значения поля (если 0, то строка обрезаться не будет).
            /// </summary>
            public static int PrunningLength = 0;
            
            /// <summary>
            /// Показывать ли пользователям в изменениях первичные ключи.
            /// </summary>
            public static bool ShowPrimaryKey = false;
            
            /// <summary>
            /// Сохранять ли старое значение.
            /// </summary>
            public static bool KeepOldValue = true;
            
            /// <summary>
            /// Сжимать ли сохраняемые значения.
            /// </summary>
            public static bool Compress = false;
            
            /// <summary>
            /// Сохранять ли все значения атрибутов, а не только изменяемые.
            /// </summary>
            public static bool KeepAllValues = false;
        }
    }
}
